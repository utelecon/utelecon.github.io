---
interface Props {
  cols: { heading: string }[];
  data: { [side: string]: string[] };
  cellWidth: number;
  sideWidth?: number;
}

const { cols, data, cellWidth, sideWidth = cellWidth } = Astro.props;
---

<table class="table">
  <thead>
    <tr>
      <th></th>
      {
        cols.map(({ heading }) => {
          return <th>{heading}</th>;
        })
      }
    </tr>
  </thead>
  <tbody>
    {
      Object.entries(data).map(([sideHeading, values]) => (
        <tr>
          <th>{sideHeading}</th>
          {values.map((value, index) => {
            return <td>{value}</td>;
          })}
        </tr>
      ))
    }
  </tbody>
</table>

<style
  lang="scss"
  define:vars={{ "cell-width": cellWidth, "side-width": sideWidth }}
>
  .table {
    word-break: break-all;
    font-size: 0.75em;
    th {
      font-weight: normal;
    }
    td,
    th {
      padding: 0.25em;

      &:first-child {
        width: var(--side-width);
        min-width: var(--side-width);
      }

      &:not(:first-child) {
        width: var(--cell-width);
        min-width: var(--cell-width);
      }
    }
    td {
      text-align: right;
    }
    thead th {
      text-align: center;
    }
  }
</style>
