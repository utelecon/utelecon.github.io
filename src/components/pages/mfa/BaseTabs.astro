---
import If from "@components/utils/If.astro";
import type { Step, RowLabels, Selection } from "./tabs";

interface Props {
  step: Step;
  labels: RowLabels;
}

const { step, labels } = Astro.props;

function tabProps(selection: Selection) {
  return {
    id: `tab-${step}-${selection}`,
    type: "button",
    role: "tab",
    "aria-controls": `panel-${step}-${selection}`,
    "aria-selected": "false",
    class: "tab",
  } satisfies astroHTML.JSX.ButtonHTMLAttributes;
}
function panelProps(selection: Selection) {
  return {
    id: `panel-${step}-${selection}`,
    role: "tabpanel",
    "aria-labelledby":
      selection === "selector" ? undefined : `tab-${step}-${selection}`,
    hidden: true,
  } satisfies astroHTML.JSX.HTMLAttributes;
}
---

<div id={`tab-list-${step}`} class="tab-list" role="tablist">
  <button {...tabProps("ms_auth")}>{labels.ms_auth}</button>
  <button {...tabProps("auth_app")}>{labels.auth_app}</button>
  <button {...tabProps("phone")}>{labels.phone}</button>
  <If cond={Boolean(labels.fido)}>
    <button {...tabProps("fido")}>{labels.fido}</button>
  </If>
</div>
<div id={`panel-list-${step}`} class="panel-list">
  <div {...panelProps("selector")}><slot name="selector" /></div>
  <div {...panelProps("ms_auth")}><slot name="ms_auth" /></div>
  <div {...panelProps("auth_app")}><slot name="auth_app" /></div>
  <div {...panelProps("phone")}><slot name="phone" /></div>
  <If cond={Boolean(labels.fido)}>
    <div {...panelProps("fido")}><slot name="fido" /></div>
  </If>
</div>

<script>
  import { onChangeTab, emitChangeTab } from "./tabs";

  onChangeTab((step, selection) => {
    document.querySelector<HTMLDivElement>(`#tab-list-${step}`)!.hidden =
      selection === "selector";
    document
      .querySelectorAll<HTMLButtonElement>(`button[id^="tab-${step}"]`)
      .forEach((tab) => {
        tab.ariaSelected = `${tab.id === `tab-${step}-${selection}`}`;
      });
    document
      .querySelectorAll<HTMLDivElement>(`div[id^="panel-${step}"]`)
      .forEach((panel) => {
        panel.hidden = panel.id !== `panel-${step}-${selection}`;
      });
  });

  function onClick(this: HTMLButtonElement) {
    const [, step, selection] = this.id.split("-");
    emitChangeTab(step, selection);
  }

  document.addEventListener("DOMContentLoaded", () => {
    document
      .querySelectorAll<HTMLButtonElement>(`button[id^="tab"][role="tab"]`)
      .forEach((tab) => {
        tab.addEventListener("click", onClick);
      });
  });
</script>

<style lang="scss">
  @import "@styles/color.scss";

  .tab-list {
    display: flex;

    &[hidden] {
      display: none;
    }
  }
  .panel-list {
    padding: 0.5rem;
    margin: 0 0 1.5rem;
    border: 1px solid $white-gray-light;
  }
  button.tab {
    display: block;
    flex: 1;
    background-color: $white-gray-dark;
    padding: 0.75rem 0.5rem;
    border-width: 0 0.5px;
    border-style: solid;
    border-color: $white-gray-light;
    outline: none;
    box-shadow: none;

    &:hover {
      cursor: pointer;
    }

    &[aria-selected="true"] {
      color: $heading-color;
      background-color: $white-gray-light;
      border-bottom: 4px solid $heading-color;
      font-weight: bold;
    }
  }
</style>
