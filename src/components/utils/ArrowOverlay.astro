---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

import If from "@components/utils/If.astro";

type Props = {
  image: ImageMetadata;
  x: number | string;
  y: number | string;
  scale?: number;
  reverse?: boolean;
  vertical?: boolean;
  color?: string;
  class?: string;
} & Record<string, any>;

const {
  image,
  x,
  y,
  scale: rawScale = 1,
  reverse = false,
  vertical = false,
  color = "#ff3333",
  tailLength = 130,
  headLength = 70,
  tailWidth = 20,
  headOverhang = 20,
  ...props
} = Astro.props;

const defaultWidth = 1280,
  defaultHeight = 720;

const scale =
  Math.max(image.width / defaultWidth, image.height / defaultHeight) * rawScale;

function parseCoord(
  rawX: string | number | null | undefined,
  rawY: string | number | null | undefined,
  width?: number,
  height?: number
): { x: number; y: number } | undefined {
  const parse = (coord: number | string | null | undefined, max = 1) =>
    typeof coord === "string" && coord.endsWith("%")
      ? (Number(coord.substring(0, coord.length - 1)) * max) / 100
      : Number(coord);

  const x = parse(rawX, width),
    y = parse(rawY, height);

  return !Number.isNaN(x) && !Number.isNaN(y) ? { x, y } : undefined;
}

const pointAt = parseCoord(x, y, defaultWidth, defaultHeight);

const xor = (a: boolean, b: boolean) => (a || b) && !(a && b);

const tl = tailLength * (xor(reverse, vertical) ? -scale : scale);
const tw = tailWidth * scale;
const hl = headLength * (xor(reverse, vertical) ? -scale : scale);
const ho = headOverhang * scale;

const path =
  pointAt !== undefined
    ? [
        `M ${pointAt.x} ${pointAt.y}`,
        "l",
        vertical ? `${-ho - tw / 2} ${-hl}` : `${-hl} ${-ho - tw / 2}`,
        vertical ? "h" : "v",
        ho,
        vertical ? "v" : "h",
        -tl,
        vertical ? "h" : "v",
        tw,
        vertical ? "v" : "h",
        tl,
        vertical ? "h" : "v",
        ho,
        "Z",
      ].join(" ")
    : "";
---

<If cond={Boolean(path)}>
  <div class:list={props.class}>
    <Image src={image} alt={props.alt ?? ""} {...props} />
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox={`0 0 ${image.width} ${image.height}`}
    >
      <path d={path} fill={color} stroke="none"></path>
    </svg>
  </div>
  <Fragment slot="else"
    ><Image src={image} alt={props.alt ?? ""} {...props} /></Fragment
  >
</If>

<style>
  div {
    position: relative;
  }

  div > svg {
    position: absolute;
    top: 0;
    left: 0;
    max-width: 100%;
    max-height: 100%;
  }
</style>
